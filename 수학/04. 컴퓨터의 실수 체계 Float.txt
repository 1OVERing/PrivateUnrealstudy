컴퓨터에서 실수를 표현하는 방법에는 크게 두 가지가 있다.
요즘 사용하는 일반적인 보급형 컴퓨터에서 32비트를 사용하는 수 체계를 float 이라고 하고, 이를 단일 정밀도(단정도)라고 한다.
그 두 배인 64비트를 사용하면 더욱 정밀한 실 수 체계를 표현할 수 있는데 이를 double이라고 한다.
컴퓨터에서 float과 double을 다루는 방법은 국제 표준 규약(IEEE-754)에 명시되어 있으며,
현대의 모든 컴퓨터는 이 방식을 기반으로 실수 연산을 빠르게 할 수 있도록 설계되어 있다.

정밀함을 요구하는 공학계에선 Double을 사용하는 것이 일반적이다.
하지만 게임 그래픽스에서는 Double을 사용하지 않는다. 그 이유는 Double이 제공하는 정밀도를 사용해 실시간 게임을
시뮬레이션하기에는 데이터들이 너무 방대해지고 연산이 많아지기 때문이다.
그래서 게임은 32비트 단일 정밀도를 가지는 float 체계를 사용해 수를 표시한다.

@ Float 체계
32비트의 수 체계는 2진수를 기반으로 수의 범위를 유연하게 표시할 수 있도록 가수부/지수부로 나누어 놓는다.
지수부를 활용하여 세밀함을 조정하고 가수부로 표현하는 방식이다.
float 방식은 총 32비트에서 가수부에는 23비트,지수부에는8비트를 할당한 후 마지막에 부호 1비트를 할당해 숫자를 표현한다.

일단 부호를 나타내는 비트가 별도로 존재하다보니 +0과 -0이 공존하는 문제가 발생한다.
그리고 비트 수가 제한이 있어서 수를 표현하는데 한계가 있다. 실수로 표현할 수 있는
가장 작은 수는 아래와 같다. 이보다 더 작은 수는 float 체계에서 표현할 방법이 없다. 
0에서 가까운 가장 작은 수 : 1.17549435E-38  ( E-38은 10의 -38승 )

그래서 float 을 사용한다는 것은 듬성듬성하고 오차가 많은 수 체계를 사용한다는 것을 의미한다.
그래서 게임 그래픽스에서 다루는 벡터는 오차가 많은 불완전한 체계이다. 흔히 사용하는 0,1이라는 값은 float 형식에서 정확하게 표현할 수 없다.
그 오차범위가 무시할 수 있는 범위이기에 문제없이 사용하고 있을 뿐이다.

언리얼 엔진에서는 허용하는 오차 범위를 위해 KINDA_SMALL_NUMBER라는 매크로를 제공하며,
유니티에서는 Mathf에서 Epsilon 변수를 제공한다.

이러한 float 체계를 사용해 컴퓨터가 만들어내는 벡터 공간은 수학적으로 완벽한 실수 체계가 만들어내는 무결한 벡터 공간과 달리
인간의 눈에 안보이는 무수한 구명들리 뚫려있는 어설픈 벡터 공간이라고 할 수 있다.
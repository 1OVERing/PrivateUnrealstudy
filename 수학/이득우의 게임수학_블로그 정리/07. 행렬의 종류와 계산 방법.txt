행렬의 종류 =========================================================================================================

@ 항등 행렬 ( Identity Matrix : 아이덴티티 매트릭스 )
항등 행렬이란 : 어떤 행렬에 곱해도 항상 원래 행렬을 유지해주는 행렬.	A * I = A
선형 변환의 개념에서 본다면 항등 행렬은 x축은 x축으로, y축은 y축으로 그대로 유지하는 선형 변환에 대응하는 행렬이다.
그래서 행렬의 열에 차례대로 (1,0)(0,1)을 삽입한 행렬이 항등 행렬이 된다.
A = { {1,0},{0,1} }

@ 전치 행렬 ( Transpose Matrix : 트랜스포우즈 매트릭스 )
전치 행렬이란 : 행과 열이 뒤바뀐 행렬을 의미한다.
각 열이 (a,c)와(b,d)로 구성된 행렬A의 전치 행렬을 다음과 같다.
A = { {a,b} , {c,d} }	   (Transpose)->	A(t) = { {a,c} , {b,d} }

	#어떤 행렬에 곱한 결과가 항등행렬이 나오는 행렬을 " 역행렬 ( Inverse Matrix :인버스 매트릭스 ) "이라고 한다.

일단 이 두 행렬에 대해서만 서술한다.

행렬의 계산 방법 ======================================================================================================

# 행렬 * 벡터
{ ( a, b)	( c, d ) } * ( x, y )
=
{ ( a*x + b*y )  ( c*y + d*y ) }

# 행렬 * 행렬
{ ( a , b ) * ( c , d ) }  * { ( e , f ) , ( g , h ) }
=
{ ( a*e + b*g  c , d ) }

행렬의 이런 곱셈 규칙은 그냥 만든 것이 아니라, 특정한 의도에 의해 설계되었고, 이로 인해
게임 그래픽에 필요한 연산을 빠르게 계산할 수 있게 되었다.



행렬곱 EX

A = { ( 1, 2 ) ( 3, 4 ) }
*
B = { ( 5, 6 ) ( 7, 8 ) }

=

Result = { ( 19, 22 ) ( 43, 50 ) }

1번 A(1) * E(5) + B(2) * G(7) = 19
2번 A(1) * F(7) + B(2) * H(8) = 22
3번 C(3) * E(5) + D(4) * G(7) = 43
4번 C(3) * F(7) + D(4) * H(8) = 50


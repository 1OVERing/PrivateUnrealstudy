역행렬 =============================================================================================================
앞선 행렬식 은 역행렬이 존재하는지를 판단하기 위한 식이며,
새롭게 변환된 벡터 공간의 크기 변화량을 의마했다.

그리고 실제로 행렬식은 역행렬을 계산하는데 사용된다.
2x2 행렬에서 역행렬을 구하는 공식은 다음과 같다.
이때 행렬식 값은 꼭 0이 아니여야 한다.

~@!@!#~!#!@#!@#@13

어떤 행렬을 사용해 행렬식만큼 벡터 공간이 변했다면,
다시 원래대로 돌아오기 위해서는
(1/행렬식)만큼의 크기가 변해야 한다.
0은 무언가를 나눌 수 없기에 행렬식이 성립하지 않는 것이다.

앞선 L:V->W 에서는 X값이 2배 만큼 길어졌다.
행렬식 값도 2이며,
행렬은 당연히 1/2값 만큼 변해야 한다.

===================================
https://blog.naver.com/destiny9720/221402703960
다양한 역행렬을 구하는 방법이 나오지만
컴퓨터 그래픽스에서는 해당 방법을 사용하지 않으므로 스킵,
===================================

@ 직교 행렬의 역행렬
우리가 컴퓨터 그래픽에서 다루는 행렬들은 모두 직교 행렬 ( Orthogonal Matrix: 오어쏘거널 매트릭스)
이라는 특별한 행렬 형태를 가진다.
	# 직교행렬이란?
	   행렬을 구성하는 모든 행과 열 벡터가 자기 자신을 제외한 나머지 행과 열벡터와 90도를 이룸과 동시에
	   크기가 1인 단위 벡터로 구성된 행렬을 의미한다.

행렬중 항등행렬은 대표적인 직교 행렬인 것이다.
그리고 앞서서 살펴본 우회전 행렬도 직교 행렬이다.
	# 항등 행렬을 우회전 시켜도 기저 벡터 간의 간격도 90도를 유지하기 때문이다.
우회전 행렬 = { ( 0 1 ) ( -1 0 ) }

직교 행렬의 특징 중 하나는 전치 행렬이 바로 역행렬이 된다는 것이다.
	#이를 공식으로 증명하려면 벡터의 내적에 대해 다뤄야 하니 일단 스킵하겠다.
우회전의 역행렬은 무엇인가?
바로 좌회전 행렬이다. 그런데 우회전은 직교 행렬이므로 좌회전을 구할 때 ad-bc를 계산하고 여인수와 수반 행렬등을
계산할 필요없이 그냥 전치 행렬만 구해주면 답이 나온다는 것이다.

직교 행렬은 컴퓨터 그래픽스의 트랜스폼을 구성하는 삼대장 중 하나인 회전(rotation) 행렬과 밀접한 관련이 있다.
이렇게 미리 알아두면 좋은 역행렬 공식들이 몇 가지 더 있다.


@ 대각 행렬의 역행렬
@ 밀기 행렬의 역행렬


위의 세 가지 특수한 경우는 컴퓨터 그래픽에서 자주 사용되기 때문에 역행렬을 계산할 때 예외적으로 처리하도록 만들면 빠르게 역행렬을 구할 수 있다.






# 질문 행과 열벡터와 90도를 이룬다는 것이 무슨말인가?
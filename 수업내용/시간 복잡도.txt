@ 시간 복잡도
시간 복잡도를 쉽게 말하면, 프로그램 수행시간을 분석하는 것이다.
그래서 반복문에 크게 영향을 받는다. 알고리즘의 시간 복잡도는 주로 빅-오 표기법을 사용하여 나타낸다.
빅-오 표기법에서는 최고차항의 계수와 그보다 낮은 차수의 항을 제외시켜서 표기한다.

빅-오 표기법은 알고리즘이 최악일 때의 경우를 판단한다고 이야기 한다. 예를 들어,
some_list = [1,2,3,4,5] 이와 같은 list를 앞에서부터 탐색하여 숫자 5를 찾아내면5번만에 찾아낼 것이다.
만약에 5가 맨 앞에 있었으면 제일 처음 찾아낼 것이지만,
빅-오 표기법은 이처럼 최악의 경우를 나타내는 표기법이다.

시간 복잡도에서 주의해야할 점은 시간 복잡도가 실제 실행시간이 아닌 연산수치로 판별하는 개념이라는 것이다.
명령어의 실행시간은 컴퓨터의 하드웨어 또는 프로그래밍 언어에 따라 편차가 존재하기 때문에
명령어의 실행 횟수 등으로 성능을 평가하는 것이다.

O(1)		상수 시간 : 문제를 해결하는데 오직 한 단계만 처리함.
O(log n)		로그 시간 : 문제를 해결하는데 필요한 단계들이 연산마다 특정 요인에 의해 줄어듬.
O(n)		직선적 시간 : 문제를 해결하기 위한 단계의 수와 입력값 n이 1:1 관계를 가짐.
O(n log n)	문제를 해결하기 위한 단계의 수가 N*(log2N) 번만큼의 수행시간을 가진다. (선형로그형)
O(n^2)		2차 시간 : 문제를 해결하기 위한 단계의 수는 입력값 n의 제곱.
O(C^n)		지수 시간 : 문제를 해결하기 위한 단계의 수는 주어진 상수값 C 의 n 제곱.


O(1)
입력에 관계없이 복잡도는 동일하게 유지된다.

O(log n)
입력이 증가함에 따라 처리 시간이 선형적으로 증가한다.

O(n^2)
이중 반복문으로 square 연산이 수행된다.


@ 공간 복잡도
공간 복잡도를 쉽게 말하면 프로그램의 메모리 사용량을 분석하는 것이다.
간단하게 사용한 배열의 크기 * (해당 자료형의 크기)로 계산하면 된다.
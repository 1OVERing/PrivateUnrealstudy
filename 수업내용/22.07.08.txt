@ HashTable (해시 테이블) / https://www.crocus.co.kr/1147
HeshTable은 Key와 Value로 구성된 하나의 테이블을 의미한다.
해시 테이블은 0(1)의 시간 복잡도를 가지게 된다
이러한 Hash Table을 이용한 방식을 사용하는 자료구조가
Unordered_map / Unordered_set이 존재한다.
#이때 해시 테이블을 최소화 시키기위해 해시 테이블을 효율적으로 구성해야 한다.
해시 함수가 해시테이블의 성능을 좌지우지한다.
버킷(메모리크기)의 크기는 고정으로 가져가며, Key값은 다르지만 같은
인덱스값이 같게 나올 수 있다. 이 과정을 충돌(collision)이라고 하며,
충돌이 잦으면 해시의 최대 장점인 Key를 통해 0(1)만에 value를 가져올 수 없다.
해결방법은 동적으로 크기가 변하게 만들던가/ 하나의  인덱스에서 링크드리스트를 만들어
복수의 데이터를 저장하게 만드는 방법이다.
후자의 연결리스트로 value를 저장하는 기법을 체이닝 기법이라고 한다.
키와 값을 연결하는 과정을 해싱 이라고 한다.
해시 함수는 해시값이 충돌이 않나도록 해시값을 주는 해시함수가 좋은 해시함수다.

예제는 우리가 쓰는 비밀번호는 그대로 서버에 올리지 않고 해시(으깨다)를 하여
문자 하나하나 분해를 하여 그 값을 암호를 저장한다.

탐색/삽입/삭제 속도가 빠르며, 여러 항목 간의 관계를 저장하는데 유용하게 사용된다.

해시 테이블은 검색속도가 빠르다.
버킷의 크기를 소수로 잡는다

원주율로 해시값을 만들면?



ITTI


#constexpr(컨스펙터)
const보다 상수적인 측면을 강화시킨 것이다.
변수의 경우 선언시 상수화가 되어 값을 넣어줘야 하며
함수시 반환타입 전에 작성한다.
주로 원주율 같이 절대 변하면 안되는 값에 사용된다.

@ 함수 포인터
반환형 (*포인터 변수 이름) (파라미터 목록);
@람다







#Nested(네스티드)
	Unreal 같은 경우 Node 같은 경우 list 클래스 안에서 구현해서 사용한다.
#Quaternionf (쿼터니언: 사원수)
#아핀공간
#동차좌표계

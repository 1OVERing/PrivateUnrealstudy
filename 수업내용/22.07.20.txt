# MSDN WIN API
	C++도 지원하지만 C#베이스 에DX와 비슷한 COM 구조로 작성되어있다.

# winrt ( windows runtime )
	C++베이스

# winAPI 시작
https://docs.microsoft.com/ko-kr/windows/win32/learnwin32/learn-to-program-for-windows

# winAPI 언어 참조
https://docs.microsoft.com/ko-kr/cpp/cpp/cpp-language-reference?view=msvc-170

# 코딩규칙 ( 굳이 이렇게 쓸 필요없다. )
https://docs.microsoft.com/ko-kr/windows/win32/learnwin32/windows-coding-conventions

Direct스토리지 SDK?API

CPU에서 일을 만들고
GPU에서 일을 처리한다.

병목현상이 CPU 에서 일어나는지 GPU에서 일어나는지를 판단해서 최적화를 해야한다.

what is window?
https://docs.microsoft.com/ko-kr/windows/win32/learnwin32/what-is-a-window-
window 윈도우 창을 조작하는 HWND값 설명

winMain : 애플리케이션 진입점
https://docs.microsoft.com/ko-kr/windows/win32/learnwin32/winmain--the-application-entry-point
WINAPI 키워드는 특수한 케이스에서만 붙여서 사용한다.
인자값은
해당 프로그램의 핸들, 0(16비트에서 사용함 의미없음),커맨드 명령어(문자열),창의 크기상태 플래그

프로그램 창 띄우기
https://docs.microsoft.com/ko-kr/windows/win32/learnwin32/your-first-windows-program

# lib 라이브러리는 EXE파일을 만들 때 EXE안에 포함되기 때문에 lib의 크기만큼 EXE파일이 커진다.
dll 라이브러리는 





====================================================================================
@ 기본 구현
msdn의 테스트 window 창 구현을 그대로 가져와 사용한다.
	링커 -> 시스템 하위시스템에서 창으로 바꿔줘야 창이 제대로 나온다.
* 기본 구현의 자세한 내용은 코드의 주석 참조



@ The DirectX Tool Kit ( DirectXTK )
현재 DX는 잘게 기능별로 쪼개서 배포를 하고있다.
DirectXTK 깃허브를 보면 마우스나 키보드의 대한 in/out put을 잘 만들어져 있다.



@ winAPI는 medn보다 http://soen.kr/  이 잘 정리되어있다.


# 빌드
CPP - > obj -> exe
hlsl -> csp -> exe


@ Direct3D 11 장치
내가 하드웨어를 사용할거니 장치에 대한 권한을 달라고 해서 디바이스와 컨텍스트를 받아온다.
CPU에서의 처리가 고수준이고 GPU 처리가 저수준이다.
CPU에서는 항상 자료를 담고 GPU에서 데이터를 받아와 처리를 해준다.
그래서 CPU에서 GPU로 데이터를 보낼 때 Buffer에 담아서 GPU에 보내준다.

# ID3D11Device (장치)	CPU
- ID3D11Device는 리소스(Buffer)를 생성하는데 주로 사용한다.
- Direct3D를 활용한 응용 프로그램에서는 하나 이상의 장치를 생성해야 한다.
- D3D11CreateDevice나 D3D11CreateDeviceAndSwapChain을 사용해 장치를 생성할 수 있다.

# ID3D11DeviceContext (장치 문맥/컨텍스트)	GPU에 할당할 때 사용한다.
- ID3D11DeviceContext는 렌더링 파이프라인 각 단계에서 사용할 프로그램 및 리소스를 바인딩(연결/할당) 하는데 사용한다.


@ IDXGISwapChain (스왑 체인)

- 렌더링 대상(타겟)이 되는 백버퍼(Back Buffer)를 생성하고 관리하는 일을 담당하며,
   현재 화면에 출력되고 있는 이미지인 프론트 버퍼(Front Buffer)와 백버퍼(Back Buffer)를 교환하는 일을 담당한다.
- 스왑 체인은 다음의 렌더링 특성을 정의한다.
    - 렌더링 영역의 크기
    - 디스플레이의 새로 고침(업데이트) 빈도(Rate)
    - 디스플레이 모드(Fullscreen/Windowed)
    - 표면 형식 (Surface Type)
- DXGI_SWAP_CHAIN_DESC 구조체에 필요한 정보를 입력하고
    D3D11CreateDeviceAndSwapChain이나 IDXGIFactory::CreateSwapChain을 사용해 생성할 수 있다.


















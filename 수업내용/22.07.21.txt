#
DX 오류메시지를 출력창에 플래그로 간단하게 띄울 수 있고 메시지박스처럼 따로 알려주는 방법도 존재한다.

#용어
ID3D11 같이
D3D 앞에 붙는 I는 인터페이스의 약어이다.


GPU 메모리에 그릴 이미지를 가지고 있다.
스압체인에서 정의한 크기만큼 백버퍼를 준비를 해준다.
gpu에서 백버퍼와 똑같이 생긴 도화지에 대한 정보를 cpu에 넘겨준다.

# COM
COM 구조로 되어있다. Component Object Model
IUnknown 클래스가 DX 구조에서 최상위 클래스가 된다.
레퍼런스 카운트의 형태를 가지고 있다.

GPU에서 가지고 있는 백버퍼를 복사해서 사본을 우리에게 전달해준다.
그 사본으로 RTV를 만든다.

GPU(backBuffer) - > copy(BackBuffer) - > create RTV

리소스를 생성할땐 device를 쓰며, 사용할 땐 context를 사용한다.

@ 역행렬

~ 13 수학블로그

4x4까지 행렬을 쓰는 이유는 밀기행렬을 하기 위해서고
밀기행렬을 해야 이동트랜스폼을 제작할 수 있다.


# Normalized Device Coordinates : NDC
뷰포트 좌표계는 중앙이 0.0이며 좌 1.0 우 -1.0 상1.0 하 -1.0 으로 x2y2 로 되어있다.
그걸 NDC좌표계라고 한다.

stride 라고 버퍼에 넘겨주는 행위를 해야한다.

# float4 에서는 w값은 오메가라 부르며 0이면 벡터 1이면 점이라고 인식한다.
벡터는 벡터 공간에 있어 벡터와 위치(점)은 다른 공간에 존재한다.
그래서 xyz를 똑같이 사용하기 위해서 w로 구분하며,
아핀공간(동차좌표계)에서 우겨넣어 사용한다.

# 테셀레이션 단계
Hull , Domain,Geometry Shader 3개를 묶어 테셀레이션 단계라고한다
실제로 테셀레이션 단계는 개별적으로 있지만 Hull -> 테셀레이션 - > domain - > Geometry 순으로
파이프라인이 되어있는데 기능적으로 밀접하기도 하며,
테셀레이션은 우리가 사용정의를 할수 없기에 저 세개를 묶어서 테셀레이션 단계라도한다.

정점데이터 -> 레스터라이저 단계(점들의 도형 안의 사용될 픽셀을 계산한다.) -> 픽셀
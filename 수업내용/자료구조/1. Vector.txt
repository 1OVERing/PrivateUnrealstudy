@ 헤더 : <vector>
@ 라이브러리 : Standard Tamplate Library ( 스탠다드 템플릿 라이브러리 )
@ 클래스 이름 : std::vector
@ 컨테이너 방식 : Sequence Containers ( 시퀸스 컨테이너 ) / 정렬되지 않은 연결리스트,배열
@ 특징 :
	ㆍ동적 배열 클래스이다.
	ㆍ연속된 메모리 위치에 배치된다.
	ㆍ연속적인 메모리 공간에 저장되기에 개별원소에 대한 접근 속도가 빠르다. ( Index 접근 )
	ㆍ원소가 되는 객체를 삽입하거나 삭제시 자동으로 자신의 크기를 조정한다.
	ㆍ보통 끝에 삽입한다. ( push_back ) 중간에 데이터 삽입 및 삭제는 바람직 하지 않다.
	ㆍ삽입/삭제 속도가 느리다. / 중간 삽입/삭제는 더 느리다.
	ㆍpush_front는 존재하지 않는다.
	ㆍ컨테이너 끝에서 삽입/제거하는 속도가 Deque/List 중 가장 빠르다.
	ㆍSTL의 거의 모든 알고리즘/함수에 사용이 가능하다.


@ 추가 설명
std::vector는 동일 타입의 자료 집합이다.
템플릿 기반 클래스이므로 임의의 타입을 요소로 가질 수 있다.

요소의 개수에 따라 동적으로 메모리를 관리하게 된다. 이 작업은 보통 자동으로 이뤄지지만
capacity의 용량을 넘어서게 되면 재할당이 일어나 수동으로 reserve() 함수로 어느정도 미리
공간을 확보해두는 것이 바람직하다.

다른 컨테이너의 비해 구조가 단순하고 사용 방법이 쉬우며 속도도 빠른편이다,
또 실용적이라 활용 빈도가 높다.




@ 사용해야 하는 경우
	ㆍ저장할 데이터의 개수가 가변적일 때
	ㆍ중간에 데이터 삽입/삭제가 적거나 없을 때
	ㆍ저장된 요소를 자주 검색하지 않을 때
	ㆍ랜덤 액세스를 자주 할 때

@ 궁금증
랜덤 액세스의 예제를 보면 Range based for loop 를 보는데
순차적으로 접근하는데 왜 랜덤 액세스인가?
실제로는 랜덤 액세스이지만 거의 순차적으로 액세스한다.
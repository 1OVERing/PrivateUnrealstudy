# V-sync (수직 동기화) / H-sync
# L/R 좌표계 엄지(x) 검지(y) 중지(z)
# 파이어 폭스 읽기 모드
# 각도 <-> 라디안 변환
	앵글/디그리/라디안
# using (타입 앨리어스)
	C++ 11 도입
	using FunctionPoint = int (*)(int,double);	// 함수 포인터 선언
# windows 창을 띄울 때 크게 winAPI를 쓰는것과 WPF(C#)을 사용하는 법이 있다.
# const_cast(), static_cast(), reinterpret_cast(), dynamic_cast() 라는 C++의 네 가지 형변환 방법
	const_cast() 	= 변수에 const 속성을 추가/제거 할때 사용된다. / 부득이 하게 const속성을 제거할 때 사용된다.
	static_cast() 	= 명시적 형변환 기능을 지원한다. (int->float) 서로 연관있는 포인터형 사이에서만 
				변환을 수행한다. 즉 서로 상속에 관계같은 연관이 있는 포인터형에서만 가능하다.
				보통 기본형이나 상속관계에 있는 클래스 포인터 형변환에 사용된다.
				런타임 시간에 타입검사를 수행하지 않는다는 점에 주의해야 한다.
	reinterpret_cast() 	= 보통 포인터간의 형변환 때에 사용된다. 흔히 void* <-> class* 간의 형변환후 사용을 한다.
	dynamic_cast()	= 같은 상속 계층에 속한 타입끼리 형변환 할때 실행 시간에 타입을 검사한다.
				다른 형변환에 비해 성능이 떨어진다.
				사용을 하기 위해서는 계층구조안에 가상함수가 하나라도 있어야 한다.
# RTTI
  특정한 객체의 정보, 예를 들면 클래스의 이름이나 어떤 클래스를 상속했는지 등을 알아야 할 때가 있는데 이를 위해
필요한 것이 런타임 타입 정보 ( RunTime Type Information: RTTI )다.

# typeid
typeid 연산자는 객체의 타입에 대한 정보를 얻을 때 사용한다.
사용할때 타입의 정보를 저장하는 객체인 type_info 클래스를 만들어서 내부를 볼수 있다.
const type_info& info = typeid(Aclass);
std::cout << "클래스 이름: " << info.name() << std::endl;

# RTTI ( custom RTTI )
표준 C++ STL의 RTTI 시스템의 가장 큰 단점은 성능이다.
커스텀 RTTI 시스템 : 가장 간단한 방식
1. 문자열 사용
- 클래스에 클래스 이름을 문자열로 받아오는 방법이다.
2. 매크로 사용
- 함수의 이름을 동일하게하고 타이핑을 줄이기 위한 방법으로 자동으로 함수를 추가하는 매크로를 활용할 수 있다.

	// 매크로 선언.
	#define RTTI(name) \
	public:  \
	virtual const std::string& ClassName() const { return #name; }

	// 매크로 사용 방법.
	class GameEntity
	{
	public:
	RTTI(GameEntity);
	};
3. 상수의 사용
- 유연성을 배제하고 성능을 생각한다면 문자열 대신 상수나 열거형을 반환하는 방법도 고려해볼 수 있다.
- 이런 방식은 하위 클래스의 수가 적을 때, 그리고 프로그램의 다른 부분에서 이를 확장할 계획이 없을 때 유용하다.
4. 매크로 사용
static을 활용해서 하나의 클래스에서 공용으로 사용하는 숫자를 임의로 잡는다.

class RTTI
{public:
	RTTI(const std::string& name) : className(name) { }
	const std::string& ClassName() const { return className; }
private:
	std::string className;}

class GameEntity
{public:
	static const RTTI rtti;
	virtual const RTTI& RTTI() const { return rtti; }}

// RTTI 객체 비교.
if (&entity1->RTTI() == &entity2->RTTI())
{같은 클래스}
if (&entity1->RTTI() == &GamePlayer::rtti)
{entity1은 GamePlayer 타입}

5. 단일 상속의 추가		= 현재 DX 구현 예정
- 지금까지의 간단한 RTTI 시스템에는 상속 개념이 없다.
- 따라서 부모의 RTTI 정적 객체에 포인터를 추가하면 RTTI 클래스를 확장해 부모에 대한 정보를 얻을 수 있다.

====================================================================================
@ 이득우의 게임수학
1. 과제_수학적으로 "선형성"의 의미
2. 과제_vector
3. 과제_vector space
4. 과제_컴퓨터의 실수 체계
5. 과제_선형 변환
====================================================================================
# MMX / SIMD(심드) 명령어의 집합
# Garbage collector ( 가비지 컬렉터 )
	Mono project / UE5 참고해서 공부

@ 스마트 포인터
- C++는 동적 할당이 필요할 때 개발자가 직접 new 연산자를 통해서 메모리 할당을 요청한다.
- new로 할당 받은 메모리는 delete를 통해 명시적으로 메모리를 해제해야 한다.
- new로 할당한 메모리를 delete로 해제하지 않아 발생하는 문제를 흔히 메모리 누수(Memory Leak)라고 한다.
- 자바나 C# 등의 최신 언어는 가비지 컬렉터를 지원하지만, C++는 기본적으로 가비지 컬렉터가 없다. 대신 C++는 STL을 통해
	 메모리를 알아서 해제해주는 똑똑한 포인터를 지원한다.
- C++의 스마트 포인터는 일반 포인터에서 사용하는 - >와 * 연산자를 그대로 사용할 수 있어 사용성 면에서 편리하다.
- 또한 get() 함수를 통해 원시 포인터(raw pointer)에 접근도 가능하다.
- 여기서 설명하는 스마트 포인터는 Boost 라이브러리의 스마트 포인터의 개념이 베이스를 둔다.

#스마트 포인터의 종류
C++는 3가지 종류의 스마트 포인터를 지원한다.

#unique_ptr
- unique_ptr은 가장 기본이 되는 포인터로 단일 소유자만 허용한다. 
	새로운 소유자로 이동(Move)은 가능하지만 복사하거나 공유할 수 없다.
- 가장 가볍고 효율적이다.

# shared_ptr
- shared_ptr은 참조 횟수(Reference Count)가 계산되는 포인터다.
- 원시 포인터 하나를 여러 소유자에게 할당(공유)하려는 경우에 사용한다
	(예: 컨테이너에서 포인터 복사본을 반환할 때 원본을 유지하려는 경우).
- 원시 포인터는 모든 shared_ptr 소유자의 소유권이 해제될 때까지 삭제(해제)되지 않는다.

#weak_ptr
- share_ptr과 함께 사용할 수 있는 특별한 유형의 스마트 포인터다.
- weak_ptr은 shared_ptr이 소유하는 포인터에 대한 접근은 제공하지만, 참조 횟수에 포함되지 않는다.
- shared_ptr 사용 시 발생할 수 있는 순환 참조를 해결하기 위해 사용하는 경우가 많다.



#unique_ptr 메뉴얼
- unique_ptr은 포인터를 공유하지 않는다.
- unique_ptr은 다른 함수에 복사하거나, 값으로 전달하거나 복사본을 생성해야 하는 STL 알고리즘에는 사용할 수 없다.
- C++ 14부터 unique_ptr의 생성을 도와주는 make_unique 함수를 제공한다.
- 아래 그림은 두 unique_ptr 객체 사이의 소유권 이전을 보여준다.
- unique_ptr을 사용하려면 <memory> 헤더를 추가해야한다.
- 원시 포인터만큼 가볍고 효율적이며, STL 컨테이너에서 사용 가능하다.

#shared_ptr 메뉴얼
- shared_ptr은 여러 소유자를 허용하는 메모리 공간의 수명을 관리하기 위한 스마트 포인터다.
- shared_ptr을 초기화한 후 복사, 함수에 값으로 전달, 다른 shared_ptr 객체로 할당이 가능하다.
- 전체 참조 횟수가 0에 도달하면 메모리가 해제된다.
- 다음 그림은 한 메모리 공간을 여러 shared_ptr 객체가 소유하는 경우를 보여준다.

====================================================================================
@ 정렬 알고리즘
# 버블 정렬 - 선택 정렬
# 삽입 정렬
#    퀵 정렬














@ Hash Function
해시 함수(Hash Function)은 임의의 길이의 문자열을 받아와 고정 문자열로  바꾸어주는 함수이다.
이 때 함수를 구현하는 방법에 따라서 서로 다른 임의의 문자열이 같은 고정문자열이 되기도 하며
이러한 부분을 충돌이라고 한다. ( H(s1) == H(s2) )
EX ) 사용자 비밀번호(Key값) -> HashFunction(해시변환 함수) -> Hashes (해시값)
이러한 Hash값을 인덱스 값으로 활용하여 필요한 데이터를 가져온다.

	#Hash Collision (해시 충돌)
	서로 다른 문자열을 해시한 결과가 동일한 해시값이 된 경우이다.
	해시 테이블을 구현할 때 충돌이 일어나게 되면 다양하게 해결하지만 대표적으로 Chaining을 통해 해결한다.
	
	#Chaining (체이닝) 기법
	해시 체이닝은 충돌이 일어나면 그 자리에서 연결리스트를 만들어 그 다음 칸으로 넘겨주는 역활을 한다.
	이때 Key로 받아내어 계산된 Hash_Key는 충돌되도 유효하고 하나의 Hash에 연결리스트로 Value가 형성된다.
때문에 Hash Function은 해시값이 최대한 겹치지 않는 해시 함수가 가장 좋은 해시 함수이다.

@ Hash Table (해시 테이블)
Key와 Value로 된 쌍을 저장하는 자료구조이다.
HashFunction을 통해 데이터 검색에 특화되어 있다. 그만큼 Hash Function이 HashTable의 성능에 좌지우지한다.
C++에서는 map을 통해서 보다 쉽게 사용이 가능하다.
성능이 좋을 때는 O(c)에 접근할 수 있기 때문에 공간을 소비해서 접근속도를 늘리고 싶을 때 사용된다.
버킷(메모리크기)의 크기는 고정으로 가져가며, Key값은 다르지만 같은 인덱스값이 같게 나올 수 있다.
이 과정을 충돌(collision)이라고 하며, 충돌이 잦으면 해시의 최대 장점인 Key를 통해 0(1)만에 value를 가져올 수 없다.
보통 충돌을 해결하기 위해서 하나의 Hash_key에서 복수의 데이터를 저장할 수 있게끔 설계를 한다.

탐색/삽입/삭제 속도가 빠르며, 여러 항목 간의 관계를 저장하는데 유용하게 사용된다.
